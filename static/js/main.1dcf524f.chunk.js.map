{"version":3,"sources":["App.module.css","assets/smoke-1.png","Three.js/Lights.js","Three.js/Clouds.js","Three.js/Lightning.js","Three.js/Rain.js","Three.js/RainEffect.js","Three.js/Controls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Lights","props","Light","type","Clouds","size","useThree","ref","useRef","smoke","useLoader","TextureLoader","smokeTexture","useFrame","current","rotation","z","useEffect","position","x","Math","random","y","attach","args","map","transparent","opacity","Lightning","power","set","color","distance","decay","Rain","Points","rainGeo","THREE","i","rainDrop","velocity","vertices","push","rainMaterial","forEach","p","verticesNeedUpdate","rainEffect","camera","gl","fov","aspect","window","innerWidth","innerHeight","near","far","updateProjectionMatrix","setSize","width","height","density","Suspense","fallback","Array","cloud","key","extend","OrbitControls","Controls","App","console","log","isMobile","RainEffect","className","classNames","classes","aboutMe","aboutMeMobile","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1dcf524f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutMe\":\"App_aboutMe__1IjaN\",\"aboutMeMobile\":\"App_aboutMeMobile__1r5Cg\"};","module.exports = __webpack_public_path__ + \"static/media/smoke-1.a7987bab.png\";","import React from 'react'\r\n\r\nconst Lights = (props) => {\r\n    const { type } = props\r\n    const Light = type;\r\n\r\n    return <Light {...props} />\r\n}\r\n\r\nexport default Lights","import React, { useRef, useEffect } from 'react'\r\nimport { useLoader, useFrame, useThree } from 'react-three-fiber'\r\nimport {\r\n    TextureLoader,\r\n} from 'three'\r\n\r\nimport smokeTexture from '../assets/smoke-1.png'\r\n\r\nfunction Clouds(props) {\r\n    const { size } = useThree()\r\n    const ref = useRef()\r\n    const smoke = useLoader(TextureLoader, smokeTexture)\r\n    useFrame(() => {\r\n        ref.current.rotation.z -= 0.00045\r\n    })\r\n    useEffect(() => {\r\n        ref.current.position.x = Math.random() * 800 - 400\r\n        ref.current.position.y = 500\r\n        ref.current.position.z = Math.random() * 500 - 450\r\n    }, [size])\r\n\r\n    return (\r\n        <mesh\r\n            ref={ref}\r\n            position={[\r\n                Math.random() * 800 - 400,\r\n                500,\r\n                Math.random() * 500 - 450\r\n            ]}\r\n            rotation={[1.16, -0.12, Math.random() * 360]}>\r\n            <planeBufferGeometry attach=\"geometry\" args={[500, 500]} />\r\n            <meshLambertMaterial attach=\"material\" map={smoke} transparent={true} opacity={0.6}/>\r\n        </mesh>\r\n    )\r\n}\r\n\r\nexport default Clouds","import React, { useRef } from 'react'\r\nimport { useFrame } from 'react-three-fiber'\r\n\r\nconst Lightning = (props) => {\r\n    const ref = useRef()\r\n    const color = 0x062d89\r\n    const power = 20\r\n    const distance = 500\r\n    const decay = 2\r\n    const position = [200, 300, 100]\r\n    useFrame(() => {\r\n        if(Math.random() > 0.96 || ref.current.power > 200) {\r\n            if(ref.current.power < 100) \r\n              ref.current.position.set(\r\n                Math.random()*400,\r\n                300 + Math.random() *200,\r\n                100\r\n              );\r\n            ref.current.power = 50 + Math.random() * 500;\r\n          \r\n    }})\r\n    \r\n    return <pointLight\r\n        ref={ref}\r\n        color={color}\r\n        power={power}\r\n        distance={distance}\r\n        decay={decay}\r\n        position={position} />\r\n}\r\n\r\nexport default Lightning","import React, { useRef } from 'react'\r\nimport { useThree, useFrame } from 'react-three-fiber'\r\nimport * as THREE from 'three'\r\n\r\nconst Rain = (props) => {\r\n    const { Points } = useThree()\r\n    const ref = useRef()\r\n    const rainGeo = new THREE.Geometry();\r\n    for (let i = 0; i < 10000; i++) {\r\n        const rainDrop = new THREE.Vector3(\r\n            Math.random() * 400 - 200,\r\n            Math.random() * 500 - 250,\r\n            Math.random() * 400 - 200\r\n        );\r\n        rainDrop.velocity = 0;\r\n        rainGeo.vertices.push(rainDrop);\r\n    }\r\n    const rainMaterial = new THREE.PointsMaterial({\r\n        color: 0xaaaaaa,\r\n        size: 0.15,\r\n        transparent: true\r\n    });\r\n\r\n    useFrame(() => {\r\n        rainGeo.vertices.forEach(p => {\r\n            p.velocity -= 0.1 + Math.random() * 0.1;\r\n            p.y += p.velocity;\r\n            if (p.y < -200) {\r\n              p.y = 200;\r\n              p.velocity = 0;\r\n            }\r\n          });\r\n          rainGeo.verticesNeedUpdate = true;\r\n          ref.current.rotation.y +=0.002;\r\n    })\r\n    return (\r\n        <points ref={ref} args={[rainGeo, rainMaterial]} />\r\n    )\r\n}\r\n\r\nexport default Rain","/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, {useEffect} from 'react'\r\nimport { useThree } from 'react-three-fiber'\r\n\r\nimport Lights from './Lights'\r\nimport Clouds from './Clouds'\r\nimport Lightning from './Lightning'\r\nimport Rain from './Rain'\r\n\r\nconst rainEffect = () => {\r\n  const { camera, gl, size } = useThree()\r\n\r\n  camera.fov = 60\r\n  camera.aspect = window.innerWidth / window.innerHeight\r\n  camera.near = 1\r\n  camera.far = 1000\r\n\r\n  camera.position.set(0, 0, 1)\r\n  camera.rotation.set(1.16, -0.12, 0.27)\r\n\r\n  useEffect(() => {\r\n    camera.aspect = window.innerWidth / window.innerHeight\r\n    camera.updateProjectionMatrix()\r\n    gl.setSize(size.width, size.height)\r\n  }, [size])\r\n\r\n  return (\r\n    <>\r\n      <Lights\r\n        type='AmbientLight'\r\n        color={0x555555}\r\n      />\r\n      <Lights\r\n        type='DirectionalLight'\r\n        color={0xffeedd}\r\n        position={[0, 0, 1]}\r\n      />\r\n      <Lightning />\r\n      <fogExp2 color={0x11111f} density={0.002} />\r\n      <React.Suspense fallback={<mesh />} >\r\n        {[...Array(25)].map((cloud, i) => <Clouds key={i}/>)}\r\n      </React.Suspense>\r\n      \r\n      <Rain />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default rainEffect","import React, { useRef } from 'react';\r\nimport { extend, useThree, useFrame } from 'react-three-fiber';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nextend( {OrbitControls} )\r\n\r\nfunction Controls() {\r\n  const controlsRef = useRef();\r\n  const { camera, gl } = useThree();\r\n\r\n  useFrame(() => controlsRef.current && controlsRef.current.update());\r\n\r\n  return (\r\n    <orbitControls\r\n      ref={controlsRef}\r\n      args={[camera, gl.domElement]}\r\n      enableRotate\r\n      enablePan={false}\r\n      maxDistance={1000}\r\n      minDistance={5}\r\n      minPolarAngle={Math.PI / 100}\r\n      maxPolarAngle={Math.PI}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Controls;","import React from 'react';\nimport classes from './App.module.css';\nimport { Canvas } from 'react-three-fiber'\nimport classNames from 'classnames'\nimport { isMobile } from 'react-device-detect'\n\nimport RainEffect from './Three.js/RainEffect'\nimport Controls from './Three.js/Controls'\n\nconst App = () => {\n  console.log(isMobile)\n  return (\n    <div>\n      <Canvas>\n        <RainEffect />\n        {/* <Controls /> */}\n      </Canvas>\n      <div className={classNames(\n        classes.aboutMe,\n        isMobile && classes.aboutMeMobile\n      )}>\n        <h1>Xintru</h1>\n        <p>Frontend developer</p>\n        <a href=\"https://github.com/xintru\">My github</a>\n\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}