{"version":3,"sources":["App.module.css","assets/smoke-1.png","assets/milkyWay.jpg","assets/moon.jpg","ThreeJs/CloudScene.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rain","cloudParticles","scene","THREE","camera","window","innerWidth","innerHeight","renderer","flash","rainGeo","composer","POSTPROCESSING","resize","aspect","updateProjectionMatrix","setSize","animate","forEach","p","rotation","z","vertices","velocity","Math","random","y","verticesNeedUpdate","power","position","set","render","requestAnimationFrame","App","x","document","addEventListener","event","preventDefault","clientX","clientY","ambient","add","directionalLight","fog","setClearColor","color","getElementById","appendChild","domElement","i","rainDrop","push","rainMaterial","size","transparent","loader","moonGeometry","moonMaterial","map","loadTexture","moonTexture","moon","moonLight","load","smokePic","texture","cloudGeo","cloudMaterial","cloud","material","opacity","milkyWayPic","textureEffect","blendFunction","COLOR_DODGE","blendMode","value","bloomEffect","kernelSize","HUGE","useLuminanceFilter","luminanceThreshold","luminanceSmoothing","effectPass","renderToScreen","addPass","renderInit","className","classNames","classes","aboutMe","isMobile","aboutMeMobile","id","href","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8ee6ce0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutMe\":\"App_aboutMe__1IjaN\",\"aboutMeMobile\":\"App_aboutMeMobile__1r5Cg\"};","module.exports = __webpack_public_path__ + \"static/media/smoke-1.a7987bab.png\";","module.exports = __webpack_public_path__ + \"static/media/milkyWay.9775fefc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/moon.da8274ac.jpg\";","import * as THREE from 'three'\r\nimport * as POSTPROCESSING from 'postprocessing'\r\n\r\nimport smokePic from '../assets/smoke-1.png'\r\nimport milkyWayPic from '../assets/milkyWay.jpg'\r\nimport moonTexture from '../assets/moon.jpg'\r\n\r\nlet rain\r\nconst RAINCOUNT = 5000\r\n\r\nconst cloudParticles = []\r\nconst scene = new THREE.Scene()\r\nconst camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000)\r\nconst renderer = new THREE.WebGLRenderer()\r\n\r\nconst flash = new THREE.PointLight(0x062d89, 30, 500, 1.7)\r\nconst rainGeo = new THREE.Geometry()\r\nconst composer = new POSTPROCESSING.EffectComposer(renderer);\r\n\r\nexport const renderInit = () => {\r\n    camera.position.z = 1\r\n    camera.rotation.x = 1.16\r\n    camera.rotation.y = -0.12\r\n    camera.rotation.z = 0.27\r\n    document.addEventListener('mousemove', (event) => {\r\n        event.preventDefault();\r\n        camera.position.z = (event.clientX / window.innerWidth) * 15 - 1\r\n        camera.position.x = (event.clientY / window.innerHeight) * 15 + 1\r\n    })\r\n\r\n\r\n    const ambient = new THREE.AmbientLight(0x555555)\r\n    scene.add(ambient)\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffeedd)\r\n    directionalLight.position.set(0, 0, 1)\r\n    scene.add(directionalLight)\r\n\r\n    flash.position.set(200, 300, 100)\r\n    scene.add(flash)\r\n\r\n    scene.fog = new THREE.FogExp2(0x11111f, 0.002)\r\n\r\n    renderer.setClearColor(scene.fog.color)\r\n    composer.setSize(window.innerWidth, window.innerHeight)\r\n\r\n    const root = document.getElementById('root')\r\n    root.appendChild(renderer.domElement)\r\n\r\n\r\n\r\n    for (let i = 0; i < RAINCOUNT; i++) {\r\n        const rainDrop = new THREE.Vector3(\r\n            Math.random() * 400 - 200,\r\n            Math.random() * 500 - 250,\r\n            Math.random() * 400 - 200\r\n        )\r\n        rainDrop.velocity = {}\r\n        rainDrop.velocity = 0\r\n        rainGeo.vertices.push(rainDrop)\r\n    }\r\n    const rainMaterial = new THREE.PointsMaterial({\r\n        color: 0xaaaaaa,\r\n        size: 0.01,\r\n        transparent: true,\r\n    })\r\n    rain = new THREE.Points(rainGeo, rainMaterial)\r\n    scene.add(rain)\r\n\r\n    let loader = new THREE.TextureLoader()\r\n\r\n    const moonGeometry = new THREE.SphereGeometry(50, 80, 80)\r\n    const moonMaterial = new THREE.MeshPhongMaterial({\r\n        map: THREE.ImageUtils.loadTexture(moonTexture),\r\n        color: 0xffffff,\r\n        transparent: false,\r\n    });\r\n    var moon = new THREE.Mesh(moonGeometry, moonMaterial);\r\n    moon.position.set(185,1000,0);\r\n    scene.add(moon);\r\n\r\n    const moonLight = new THREE.DirectionalLight(0xffffff, 100)\r\n    moonLight.position.set(-100, 300, -150)\r\n    moonLight.rotation.set(15, 100, 60)\r\n    moonLight.power = 300\r\n    scene.add(moonLight)\r\n\r\n    loader.load(smokePic, function (texture) {\r\n        const cloudGeo = new THREE.PlaneBufferGeometry(500, 500);\r\n        const cloudMaterial = new THREE.MeshLambertMaterial({\r\n            map: texture,\r\n            transparent: true\r\n        })\r\n        for (let p = 0; p < 25; p++) {\r\n            let cloud = new THREE.Mesh(cloudGeo, cloudMaterial)\r\n            cloud.position.set(\r\n                Math.random() * 800 - 400,\r\n                500,\r\n                Math.random() * 500 - 450\r\n            )\r\n            cloud.rotation.x = 1.16\r\n            cloud.rotation.y = -0.12\r\n            cloud.rotation.z = Math.random() * 360\r\n            cloud.material.opacity = 0.8\r\n            cloudParticles.push(cloud)\r\n            scene.add(cloud)\r\n        }\r\n    })\r\n\r\n    loader.load(milkyWayPic, function (texture) {\r\n        const textureEffect = new POSTPROCESSING.TextureEffect({\r\n            blendFunction: POSTPROCESSING.BlendFunction.COLOR_DODGE,\r\n            texture: texture\r\n        })\r\n        textureEffect.blendMode.opacity.value = 0.55\r\n\r\n        const bloomEffect = new POSTPROCESSING.BloomEffect({\r\n            blendFunction: POSTPROCESSING.BlendFunction.COLOR_DODGE,\r\n            kernelSize: POSTPROCESSING.KernelSize.HUGE,\r\n            useLuminanceFilter: true,\r\n            luminanceThreshold: 0.3,\r\n            luminanceSmoothing: 0.75\r\n        })\r\n        bloomEffect.blendMode.opacity.value = 1.5\r\n\r\n        let effectPass = new POSTPROCESSING.EffectPass(\r\n            camera,\r\n            bloomEffect,\r\n            textureEffect\r\n        )\r\n        effectPass.renderToScreen = true;\r\n\r\n        composer.addPass(new POSTPROCESSING.RenderPass(scene, camera));\r\n        composer.addPass(effectPass)\r\n\r\n        window.addEventListener('resize', resize, false)\r\n        animate()\r\n    })\r\n}\r\n\r\nconst resize = () => {\r\n    camera.aspect = window.innerWidth / window.innerHeight\r\n    camera.updateProjectionMatrix()\r\n\r\n    composer.setSize(window.innerWidth, window.innerHeight)\r\n}\r\n\r\nconst animate = () => {\r\n    cloudParticles.forEach(p => {\r\n        p.rotation.z -= 0.002;\r\n    })\r\n    rainGeo.vertices.forEach(p => {\r\n        p.velocity -= 0.1 + Math.random() * 0.1;\r\n        p.y += p.velocity;\r\n        if (p.y < -200) {\r\n            p.y = 200;\r\n            p.velocity = 0;\r\n        }\r\n    })\r\n    rainGeo.verticesNeedUpdate = true\r\n    rain.rotation.y += 0.002\r\n    if (Math.random() > 0.93 || flash.power > 100) {\r\n        if (flash.power < 100)\r\n            flash.position.set(\r\n                Math.random() * 400,\r\n                300 + Math.random() * 200,\r\n                100\r\n            )\r\n        flash.power = 50 + Math.random() * 500\r\n    }\r\n    composer.render()\r\n    requestAnimationFrame(animate)\r\n}\r\n","import React, { useState } from 'react';\r\nimport classes from './App.module.css';\r\nimport classNames from 'classnames'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { renderInit } from './ThreeJs/CloudScene'\r\n\r\nconst App = () => {\r\n  renderInit()\r\n  return (\r\n    <div className={classNames(\r\n      classes.aboutMe,\r\n      isMobile && classes.aboutMeMobile\r\n    )} id=\"content\">\r\n      <h1>Xintru</h1>\r\n      <p>Frontend разработчик</p>\r\n      <a href=\"https://github.com/xintru\">Github</a>\r\n      <p>Email: xintru@gmail.com</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}